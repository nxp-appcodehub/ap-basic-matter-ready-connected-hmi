# Copyright (c) 2021 Project CHIP Authors
# Copyright (c) 2023-2024 NXP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/build.gni")
import("//build_overrides/chip.gni")
import("//build_overrides/openthread.gni")
# import("//build_overrides/rt_sdk.gni")
# import("//build_overrides/nxp_sdk.gni")

import("${chip_root}/src/platform/device.gni")

import("${nxp_sdk_build_root}/${nxp_sdk_name}/rt_sdk.gni")
import("${nxp_sdk_build_root}/${nxp_sdk_name}/rt_executable.gni")

assert(current_os == "freertos")
assert(target_os == "freertos")
assert(nxp_platform == "rt/rt1060")

declare_args() {
  # This defines the device type as a "thermostat" by default,
  # use "all-clusters" in order to build the all-clusters-app
  nxp_device_type = "thermostat"
  tcp_download = false
  enable_ota_provider = false
  wifi_connect = false
  # The 2 params below are used only if wifi_connect is true, otherwise they're unused.
  wifi_ssid = ""
  wifi_password = ""
}

if (nxp_device_type == "thermostat")
{
  app_common_folder = "${nxp_device_type}/nxp/zap"
}
else 
{
  app_common_folder = "${nxp_device_type}-app/${nxp_device_type}-common"
}

rt_executable("all_cluster_app") {
  output_name = "basic-connected-hmi-app"

  defines = [
    "CONFIG_RENDEZVOUS_MODE=7",
  ]

  include_dirs = [
    "src/main/include",
    "src/main",

    "${chip_root}/examples/all-clusters-app/all-clusters-common/include",
  ]

  sources = [
    "src/main/AppMatterButton.cpp",
    "src/main/AppTask.cpp",
    "src/main/CHIPDeviceManager.cpp",
    "src/main/DeviceCallbacks.cpp",
    "src/main/ZclCallbacks.cpp",
    "src/main/AppMatterCli.cpp",
    "src/main/include/CHIPDeviceManager.h",
    "src/main/include/DeviceCallbacks.h",
    "src/main/include/AppEvent.h",
    "src/main/include/AppTask.h",
    "src/main/main.cpp",
    "src/main/binding-handler.cpp",
  ]

  deps = [
    "${nxp_sdk_build_root}:nxp_sdk",
    "${chip_root}/src/platform/nxp/${nxp_platform}:nxp_platform",
    "${chip_root}/examples/common/QRCode",
    "${chip_root}/examples/${app_common_folder}",
    "${chip_root}/src/lib",
    "${chip_root}/examples/platform/nxp/common/app/support:freertos_memory_utils",
  ]

  if (nxp_device_type == "all-clusters")
  {
    defines += [ "DEVICE_TYPE_ALL_CLUSTERS" ]
    sources += [
      "${chip_root}/examples/${app_common_folder}/src/bridged-actions-stub.cpp",
      "${chip_root}/examples/${app_common_folder}/src/static-supported-modes-manager.cpp",
    ]
  }

  if (chip_enable_matter_cli)
  {
    defines += [ "ENABLE_CHIP_SHELL" ]
    deps += [
      "${chip_root}/src/lib/shell:shell",
      "${chip_root}/examples/shell/shell_common:shell_common",
    ]
  }

  if (chip_enable_ota_requestor) {
    sources += [
      "${chip_root}/examples/platform/nxp/common/OTARequestorInitiator.cpp",
      "${chip_root}/examples/platform/nxp/common/OTARequestorInitiator.h",
#Adding mcuboot files      
      "${chip_root}/examples/platform/nxp/common/mcuboot_app_support/mcuboot_app_support.c",
      "${chip_root}/examples/platform/nxp/common/mcuboot_app_support/mcuboot_app_support.h",
      "${chip_root}/examples/platform/nxp/common/mcuboot_app_support/flash_partitioning.h",
    ]
    include_dirs += [
      "${chip_root}/examples/platform/nxp/common",
      "${chip_root}/examples/platform/nxp/common/mcuboot_app_support",
    ]
  }

  if (chip_enable_openthread) {
    deps += [
      "${openthread_root}:libopenthread-cli-ftd",
      "${openthread_root}:libopenthread-ftd",
    ]
  }

  if (chip_enable_display) {
    include_dirs += [
      "src/main/assets",
      "src/main/include",
    ]
    sources += [
      "src/main/include/lv_conf.h",
      "src/main/display_app.cpp",
      "src/main/include/display_app.h",
      "src/main/assets/networkIcon.c",
      "src/main/assets/threadIcon.c",
      "src/main/assets/bluetoothIcon.c",
      "src/main/assets/onoffIcon.c",
      "src/main/assets/displayResources.c",
      "src/main/assets/displayResources.h",
      "src/main/assets/qrcodeIcon.c",
      "src/main/assets/infoqrIcon.c",
    ]
    defines += [
      "CHIP_DEVICE_CONFIG_ENABLE_DISPLAY=1",
      "SKIP_SYSCLK_INIT",
      "DATA_SECTION_IS_CACHEABLE=1",
      "LV_CONF_INCLUDE_SIMPLE=1",
      "LV_DEMO_CONF_INCLUDE_SIMPLE=1",
      "SDK_OS_FREE_RTOS",
      "LV_LVGL_H_INCLUDE_SIMPLE=1",
      "SHOW_DATE_TIME",
    ]
  }

  if (chip_enable_wifi)
  {
    wifi_connect = true
  }

  if (wifi_connect)
  {
    defines += [
      "WIFI_CONNECT=1",
    ]

    if (!chip_enable_matter_cli)
    {
        assert(wifi_ssid != "" && wifi_password != "", "WiFi SSID and password must be specified at build time!")
    }

    if (wifi_ssid != "")
    {
      defines += ["WIFI_SSID=\"${wifi_ssid}\"",]
    }

    if (wifi_password != "")
    {
      defines += ["WIFI_PASSWORD=\"${wifi_password}\"",]
    }

    sources += [
      "src/main/WifiConnect.cpp",
      "src/main/WifiConnect.h",
    ]
  }

  if (enable_ota_provider)
  {
    defines += [
      "ENABLE_OTA_PROVIDER=1",
    ]

    include_dirs += [
      "${chip_root}/examples/all-clusters-app/nxp/common/ota_provider/include",
      "${chip_root}/examples/all-clusters-app/nxp/common/ota_provider/ota-provider-common",
    ]

    sources += [
      "${chip_root}/examples/all-clusters-app/nxp/common/ota_provider/ota-provider-common/RTOTAProviderExample.cpp",
      "${chip_root}/examples/all-clusters-app/nxp/common/ota_provider/ota-provider-common/RTBdxOtaSender.cpp",
      "${chip_root}/examples/all-clusters-app/nxp/common/ota_provider/source/OTAProvider.cpp",
    ]

    deps += [
      "${chip_root}/src/app/server",
      "${chip_root}/src/protocols/bdx",
      "${chip_root}/third_party/jsoncpp",
    ]
  }

  # In case a dedicated assert function needs to be supported the flag sdk_fsl_assert_support should be set to false
  # The would add to the build a dedicated application assert implementation.
  if (!sdk_fsl_assert_support) {
    sources += [ "src/main/AppAssert.cpp" ]
  }

  cflags = [ "-Wconversion" ]

  ldscript = "rt_hmi.ld"

  inputs = [ ldscript ]

  ldflags = [ "-T" + rebase_path(ldscript, root_build_dir),
              "-fno-common",
              "-Wl,--defsym=__stack_size__=2048",
              "-ffreestanding",
              "-fno-builtin",
              "-mapcs",
              "-u qspiflash_config",
              "-u image_vector_table",
              "-u boot_data",
              "-u dcd_data",
              "-Wl,-print-memory-usage",
              "-mno-unaligned-access", ]

  if (enable_ota_provider)
  {
    # As the OTA file will be stored in the littlefs file system, it is required to increase the size of the file system
    # To be able to store an OTA file with a MAX size of 640K,
    # it recommended to size the file system with:
    # 161 sectors of 4K => reserved for the OTA file
    # 32 sectors of 4K => reserved for Matter/OT/BLE settings storage
    ldflags += [ "-Wl,--defsym=gNVMSectorCountLink_d=193" ]
  }

  if (chip_enable_ota_requestor)
  {
    # If OTA build flag is enabled,
    # we would need to reserve enough space for the bootloader (MCUBoot) 
    # MCUBoot requires 0x11000 Bytes to be reserved at the base of the flash 
    # Consequently, some sections will need to be shifted
    ldflags += [ "-Wl,--defsym=__mcu_boot_size__=0x11000" ]
  }

  output_dir = root_out_dir
}

group("rt1060") {
  deps = [ ":all_cluster_app" ]
}

group("default") {
  deps = [ ":rt1060" ]
}
