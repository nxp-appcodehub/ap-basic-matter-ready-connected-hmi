diff --git a/examples/platform/nxp/rt/rt1060/board/hardware_init.c b/examples/platform/nxp/rt/rt1060/board/hardware_init.c
index fd0db41f80..477d0c13f2 100644
--- a/examples/platform/nxp/rt/rt1060/board/hardware_init.c
+++ b/examples/platform/nxp/rt/rt1060/board/hardware_init.c
@@ -26,6 +26,63 @@
 static bool isInitialize = false;
 /*${variable:end}*/
 
+#if (defined(CHIP_DEVICE_CONFIG_ENABLE_DISPLAY) && (CHIP_DEVICE_CONFIG_ENABLE_DISPLAY > 0U))
+AT_QUICKACCESS_SECTION_CODE(void BOARD_ReconfigFlexSpiRxBuffer(void));
+
+/*
+ * When PXP fetch images from FlexSPI flash, the default FlexSPI RX buffer
+ * configuration does not meet the PXP bandwidth requirement. Reconfigure
+ * here.
+ */
+void BOARD_ReconfigFlexSpiRxBuffer(void)
+{
+    uint32_t ahbcr;
+
+    /* Disable I cache and D cache */
+    if (SCB_CCR_IC_Msk == (SCB_CCR_IC_Msk & SCB->CCR))
+    {
+        SCB_DisableICache();
+    }
+
+    if (SCB_CCR_DC_Msk == (SCB_CCR_DC_Msk & SCB->CCR))
+    {
+        SCB_DisableDCache();
+    }
+
+    ahbcr = FLEXSPI->AHBCR;
+
+    /* Temporarily disable prefetching while changing the buffer settings */
+    FLEXSPI->AHBCR = ahbcr & ~(FLEXSPI_AHBCR_CACHABLEEN_MASK | FLEXSPI_AHBCR_PREFETCHEN_MASK);
+
+    /* Wait for FlexSPI idle to make sure no flash data transfer. */
+    while ((FLEXSPI->STS0 & FLEXSPI_STS0_ARBIDLE_MASK) == 0U)
+    {
+    }
+
+    /* Allocate half of the prefetch buffer to the core */
+    FLEXSPI->AHBRXBUFCR0[0] =
+        FLEXSPI_AHBRXBUFCR0_PREFETCHEN_MASK | FLEXSPI_AHBRXBUFCR0_MSTRID(0) | FLEXSPI_AHBRXBUFCR0_BUFSZ(0x40);
+
+    /* Disable dedicate prefetch buffer for DMA. */
+    FLEXSPI->AHBRXBUFCR0[1] =
+        FLEXSPI_AHBRXBUFCR0_PREFETCHEN_MASK | FLEXSPI_AHBRXBUFCR0_MSTRID(1) | FLEXSPI_AHBRXBUFCR0_BUFSZ(0x00);
+
+    /* Disable dedicate prefetch buffer for DCP. */
+    FLEXSPI->AHBRXBUFCR0[2] =
+        FLEXSPI_AHBRXBUFCR0_PREFETCHEN_MASK | FLEXSPI_AHBRXBUFCR0_MSTRID(2) | FLEXSPI_AHBRXBUFCR0_BUFSZ(0x00);
+
+    /* Other half of the buffer for other masters incl. PXP */
+    FLEXSPI->AHBRXBUFCR0[3] =
+        FLEXSPI_AHBRXBUFCR0_PREFETCHEN_MASK | FLEXSPI_AHBRXBUFCR0_MSTRID(3) | FLEXSPI_AHBRXBUFCR0_BUFSZ(0x40);
+
+    FLEXSPI->AHBCR = ahbcr; /* Set AHBCR back to the original value */
+
+    /* Enable I cache and D cache */
+    SCB_EnableDCache();
+    SCB_EnableICache();
+}
+#endif
+
 /*${function:start}*/
 
 static void delay(void)
@@ -47,7 +104,17 @@ void BOARD_InitHardware(void)
 {
     if (!isInitialize)
     {
+#if (defined(CHIP_DEVICE_CONFIG_ENABLE_DISPLAY) && (CHIP_DEVICE_CONFIG_ENABLE_DISPLAY > 0U))
+        /* Init board hardware. */
+        /* Set the eLCDIF read_qos priority high, to make sure eLCDIF
+         * can fetch data in time when PXP is used.
+         */
+        *((volatile uint32_t *)0x41044100) = 5;
+#endif
         BOARD_ConfigMPU();
+#if (defined(CHIP_DEVICE_CONFIG_ENABLE_DISPLAY) && (CHIP_DEVICE_CONFIG_ENABLE_DISPLAY > 0U))
+        //BOARD_ReconfigFlexSpiRxBuffer();
+#endif
         BOARD_InitBootPins();
 #if (CHIP_DEVICE_CONFIG_ENABLE_WPA || CHIP_DEVICE_CONFIG_ENABLE_THREAD)
         BOARD_InitUSDHCPins();
@@ -60,6 +127,13 @@ void BOARD_InitHardware(void)
 #ifdef BOARD_OTW_K32W0_PIN_INIT
         BOARD_InitOTWPins();
 #endif
+
+#if (defined(CHIP_DEVICE_CONFIG_ENABLE_DISPLAY) && (CHIP_DEVICE_CONFIG_ENABLE_DISPLAY > 0U))
+        BOARD_InitLCD();
+        BOARD_InitI2C1Pins();
+        BOARD_InitSemcPins();
+#endif
+
         BOARD_InitBootClocks();
         BOARD_InitBootPeripherals();
         BOARD_InitDebugConsole();
